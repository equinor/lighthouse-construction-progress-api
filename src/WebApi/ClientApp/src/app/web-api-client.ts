/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IWorkOrdersClient {
    get(pageNumber: number | undefined, pageSize: number | undefined, activityNo: string | null | undefined): Observable<PaginatedListOfWorkOrderDto>;
    get2(id: number): Observable<WorkOrderDto>;
}

@Injectable({
    providedIn: 'root'
})
export class WorkOrdersClient implements IWorkOrdersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(pageNumber: number | undefined, pageSize: number | undefined, activityNo: string | null | undefined): Observable<PaginatedListOfWorkOrderDto> {
        let url_ = this.baseUrl + "/api/WorkOrders?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (activityNo !== undefined && activityNo !== null)
            url_ += "ActivityNo=" + encodeURIComponent("" + activityNo) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<PaginatedListOfWorkOrderDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PaginatedListOfWorkOrderDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<PaginatedListOfWorkOrderDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfWorkOrderDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfWorkOrderDto>(<any>null);
    }

    get2(id: number): Observable<WorkOrderDto> {
        let url_ = this.baseUrl + "/api/WorkOrders/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet2(<any>response_);
                } catch (e) {
                    return <Observable<WorkOrderDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<WorkOrderDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet2(response: HttpResponseBase): Observable<WorkOrderDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkOrderDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WorkOrderDto>(<any>null);
    }
}

export class PaginatedListOfWorkOrderDto implements IPaginatedListOfWorkOrderDto {
    items?: WorkOrderDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfWorkOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(WorkOrderDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfWorkOrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfWorkOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data; 
    }
}

export interface IPaginatedListOfWorkOrderDto {
    items?: WorkOrderDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class WorkOrderDto implements IWorkOrderDto {
    id?: number;
    woNo?: string | undefined;
    activityNo?: string | undefined;
    description?: string | undefined;
    status?: string | undefined;
    statusDate?: Date | undefined;
    estimatedStartTime?: Date | undefined;
    estimatedEndTime?: Date | undefined;
    progress?: number;
    estimatedHours?: number;
    hoursUsed?: number;

    constructor(data?: IWorkOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.woNo = _data["woNo"];
            this.activityNo = _data["activityNo"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.statusDate = _data["statusDate"] ? new Date(_data["statusDate"].toString()) : <any>undefined;
            this.estimatedStartTime = _data["estimatedStartTime"] ? new Date(_data["estimatedStartTime"].toString()) : <any>undefined;
            this.estimatedEndTime = _data["estimatedEndTime"] ? new Date(_data["estimatedEndTime"].toString()) : <any>undefined;
            this.progress = _data["progress"];
            this.estimatedHours = _data["estimatedHours"];
            this.hoursUsed = _data["hoursUsed"];
        }
    }

    static fromJS(data: any): WorkOrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new WorkOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["woNo"] = this.woNo;
        data["activityNo"] = this.activityNo;
        data["description"] = this.description;
        data["status"] = this.status;
        data["statusDate"] = this.statusDate ? this.statusDate.toISOString() : <any>undefined;
        data["estimatedStartTime"] = this.estimatedStartTime ? this.estimatedStartTime.toISOString() : <any>undefined;
        data["estimatedEndTime"] = this.estimatedEndTime ? this.estimatedEndTime.toISOString() : <any>undefined;
        data["progress"] = this.progress;
        data["estimatedHours"] = this.estimatedHours;
        data["hoursUsed"] = this.hoursUsed;
        return data; 
    }
}

export interface IWorkOrderDto {
    id?: number;
    woNo?: string | undefined;
    activityNo?: string | undefined;
    description?: string | undefined;
    status?: string | undefined;
    statusDate?: Date | undefined;
    estimatedStartTime?: Date | undefined;
    estimatedEndTime?: Date | undefined;
    progress?: number;
    estimatedHours?: number;
    hoursUsed?: number;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}